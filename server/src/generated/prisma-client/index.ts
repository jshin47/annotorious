// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  localLogin: (where?: LocalLoginWhereInput) => Promise<boolean>;
  systemLogin: (where?: SystemLoginWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  localLogin: (where: LocalLoginWhereUniqueInput) => LocalLogin;
  localLogins: (
    args?: {
      where?: LocalLoginWhereInput;
      orderBy?: LocalLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LocalLoginNode>>;
  localLoginsConnection: (
    args?: {
      where?: LocalLoginWhereInput;
      orderBy?: LocalLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocalLoginConnection;
  systemLogin: (where: SystemLoginWhereUniqueInput) => SystemLogin;
  systemLogins: (
    args?: {
      where?: SystemLoginWhereInput;
      orderBy?: SystemLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SystemLoginNode>>;
  systemLoginsConnection: (
    args?: {
      where?: SystemLoginWhereInput;
      orderBy?: SystemLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SystemLoginConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLocalLogin: (data: LocalLoginCreateInput) => LocalLogin;
  updateLocalLogin: (
    args: { data: LocalLoginUpdateInput; where: LocalLoginWhereUniqueInput }
  ) => LocalLogin;
  updateManyLocalLogins: (
    args: { data: LocalLoginUpdateInput; where?: LocalLoginWhereInput }
  ) => BatchPayload;
  upsertLocalLogin: (
    args: {
      where: LocalLoginWhereUniqueInput;
      create: LocalLoginCreateInput;
      update: LocalLoginUpdateInput;
    }
  ) => LocalLogin;
  deleteLocalLogin: (where: LocalLoginWhereUniqueInput) => LocalLogin;
  deleteManyLocalLogins: (where?: LocalLoginWhereInput) => BatchPayload;
  createSystemLogin: (data: SystemLoginCreateInput) => SystemLogin;
  updateSystemLogin: (
    args: { data: SystemLoginUpdateInput; where: SystemLoginWhereUniqueInput }
  ) => SystemLogin;
  updateManySystemLogins: (
    args: { data: SystemLoginUpdateInput; where?: SystemLoginWhereInput }
  ) => BatchPayload;
  upsertSystemLogin: (
    args: {
      where: SystemLoginWhereUniqueInput;
      create: SystemLoginCreateInput;
      update: SystemLoginUpdateInput;
    }
  ) => SystemLogin;
  deleteSystemLogin: (where: SystemLoginWhereUniqueInput) => SystemLogin;
  deleteManySystemLogins: (where?: SystemLoginWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  localLogin: (
    where?: LocalLoginSubscriptionWhereInput
  ) => LocalLoginSubscriptionPayloadSubscription;
  systemLogin: (
    where?: SystemLoginSubscriptionWhereInput
  ) => SystemLoginSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LocalLoginOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "hashword_ASC"
  | "hashword_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SystemLoginOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "passwordEnvironmentVariable_ASC"
  | "passwordEnvironmentVariable_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "displayName_ASC"
  | "displayName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LocalLoginUpdateInput {
  user?: UserUpdateOneRequiredWithoutLocalLoginInput;
  username?: String;
  hashword?: String;
}

export type LocalLoginWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
}>;

export interface LocalLoginCreateWithoutUserInput {
  username: String;
  hashword: String;
}

export interface SystemLoginCreateInput {
  user: UserCreateOneWithoutSystemLoginInput;
  username: String;
  passwordEnvironmentVariable: String;
}

export interface LocalLoginCreateOneWithoutUserInput {
  create?: LocalLoginCreateWithoutUserInput;
  connect?: LocalLoginWhereUniqueInput;
}

export interface SystemLoginUpdateOneWithoutUserInput {
  create?: SystemLoginCreateWithoutUserInput;
  update?: SystemLoginUpdateWithoutUserDataInput;
  upsert?: SystemLoginUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SystemLoginWhereUniqueInput;
}

export interface UserCreateWithoutSystemLoginInput {
  displayName: String;
  localLogin?: LocalLoginCreateOneWithoutUserInput;
}

export interface SystemLoginWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  passwordEnvironmentVariable?: String;
  passwordEnvironmentVariable_not?: String;
  passwordEnvironmentVariable_in?: String[] | String;
  passwordEnvironmentVariable_not_in?: String[] | String;
  passwordEnvironmentVariable_lt?: String;
  passwordEnvironmentVariable_lte?: String;
  passwordEnvironmentVariable_gt?: String;
  passwordEnvironmentVariable_gte?: String;
  passwordEnvironmentVariable_contains?: String;
  passwordEnvironmentVariable_not_contains?: String;
  passwordEnvironmentVariable_starts_with?: String;
  passwordEnvironmentVariable_not_starts_with?: String;
  passwordEnvironmentVariable_ends_with?: String;
  passwordEnvironmentVariable_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SystemLoginWhereInput[] | SystemLoginWhereInput;
  OR?: SystemLoginWhereInput[] | SystemLoginWhereInput;
  NOT?: SystemLoginWhereInput[] | SystemLoginWhereInput;
}

export interface SystemLoginSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SystemLoginWhereInput;
  AND?: SystemLoginSubscriptionWhereInput[] | SystemLoginSubscriptionWhereInput;
  OR?: SystemLoginSubscriptionWhereInput[] | SystemLoginSubscriptionWhereInput;
  NOT?: SystemLoginSubscriptionWhereInput[] | SystemLoginSubscriptionWhereInput;
}

export interface UserUpdateInput {
  displayName?: String;
  systemLogin?: SystemLoginUpdateOneWithoutUserInput;
  localLogin?: LocalLoginUpdateOneWithoutUserInput;
}

export interface LocalLoginCreateInput {
  user: UserCreateOneWithoutLocalLoginInput;
  username: String;
  hashword: String;
}

export interface UserUpsertWithoutSystemLoginInput {
  update: UserUpdateWithoutSystemLoginDataInput;
  create: UserCreateWithoutSystemLoginInput;
}

export interface UserCreateOneWithoutLocalLoginInput {
  create?: UserCreateWithoutLocalLoginInput;
  connect?: UserWhereUniqueInput;
}

export type SystemLoginWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  passwordEnvironmentVariable?: String;
}>;

export interface UserCreateWithoutLocalLoginInput {
  displayName: String;
  systemLogin?: SystemLoginCreateOneWithoutUserInput;
}

export interface LocalLoginUpdateOneWithoutUserInput {
  create?: LocalLoginCreateWithoutUserInput;
  update?: LocalLoginUpdateWithoutUserDataInput;
  upsert?: LocalLoginUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: LocalLoginWhereUniqueInput;
}

export interface SystemLoginCreateOneWithoutUserInput {
  create?: SystemLoginCreateWithoutUserInput;
  connect?: SystemLoginWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutSystemLoginInput {
  create?: UserCreateWithoutSystemLoginInput;
  update?: UserUpdateWithoutSystemLoginDataInput;
  upsert?: UserUpsertWithoutSystemLoginInput;
  connect?: UserWhereUniqueInput;
}

export interface SystemLoginCreateWithoutUserInput {
  username: String;
  passwordEnvironmentVariable: String;
}

export interface SystemLoginUpdateInput {
  user?: UserUpdateOneRequiredWithoutSystemLoginInput;
  username?: String;
  passwordEnvironmentVariable?: String;
}

export interface UserCreateOneWithoutSystemLoginInput {
  create?: UserCreateWithoutSystemLoginInput;
  connect?: UserWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutLocalLoginInput {
  create?: UserCreateWithoutLocalLoginInput;
  update?: UserUpdateWithoutLocalLoginDataInput;
  upsert?: UserUpsertWithoutLocalLoginInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  displayName: String;
  systemLogin?: SystemLoginCreateOneWithoutUserInput;
  localLogin?: LocalLoginCreateOneWithoutUserInput;
}

export interface UserUpdateWithoutLocalLoginDataInput {
  displayName?: String;
  systemLogin?: SystemLoginUpdateOneWithoutUserInput;
}

export interface LocalLoginUpdateWithoutUserDataInput {
  username?: String;
  hashword?: String;
}

export interface UserUpsertWithoutLocalLoginInput {
  update: UserUpdateWithoutLocalLoginDataInput;
  create: UserCreateWithoutLocalLoginInput;
}

export interface SystemLoginUpsertWithoutUserInput {
  update: SystemLoginUpdateWithoutUserDataInput;
  create: SystemLoginCreateWithoutUserInput;
}

export interface SystemLoginUpdateWithoutUserDataInput {
  username?: String;
  passwordEnvironmentVariable?: String;
}

export interface LocalLoginWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  hashword?: String;
  hashword_not?: String;
  hashword_in?: String[] | String;
  hashword_not_in?: String[] | String;
  hashword_lt?: String;
  hashword_lte?: String;
  hashword_gt?: String;
  hashword_gte?: String;
  hashword_contains?: String;
  hashword_not_contains?: String;
  hashword_starts_with?: String;
  hashword_not_starts_with?: String;
  hashword_ends_with?: String;
  hashword_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: LocalLoginWhereInput[] | LocalLoginWhereInput;
  OR?: LocalLoginWhereInput[] | LocalLoginWhereInput;
  NOT?: LocalLoginWhereInput[] | LocalLoginWhereInput;
}

export interface UserUpdateWithoutSystemLoginDataInput {
  displayName?: String;
  localLogin?: LocalLoginUpdateOneWithoutUserInput;
}

export interface LocalLoginUpsertWithoutUserInput {
  update: LocalLoginUpdateWithoutUserDataInput;
  create: LocalLoginCreateWithoutUserInput;
}

export interface LocalLoginSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocalLoginWhereInput;
  AND?: LocalLoginSubscriptionWhereInput[] | LocalLoginSubscriptionWhereInput;
  OR?: LocalLoginSubscriptionWhereInput[] | LocalLoginSubscriptionWhereInput;
  NOT?: LocalLoginSubscriptionWhereInput[] | LocalLoginSubscriptionWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  displayName?: String;
  displayName_not?: String;
  displayName_in?: String[] | String;
  displayName_not_in?: String[] | String;
  displayName_lt?: String;
  displayName_lte?: String;
  displayName_gt?: String;
  displayName_gte?: String;
  displayName_contains?: String;
  displayName_not_contains?: String;
  displayName_starts_with?: String;
  displayName_not_starts_with?: String;
  displayName_ends_with?: String;
  displayName_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  systemLogin?: SystemLoginWhereInput;
  localLogin?: LocalLoginWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  displayName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  displayName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  displayName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocalLoginEdgeNode {
  cursor: String;
}

export interface LocalLoginEdge
  extends Promise<LocalLoginEdgeNode>,
    Fragmentable {
  node: <T = LocalLogin>() => T;
  cursor: () => Promise<String>;
}

export interface LocalLoginEdgeSubscription
  extends Promise<AsyncIterator<LocalLoginEdgeNode>>,
    Fragmentable {
  node: <T = LocalLoginSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SystemLoginNode {
  id: ID_Output;
  username: String;
  passwordEnvironmentVariable: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SystemLogin extends Promise<SystemLoginNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = User>() => T;
  username: () => Promise<String>;
  passwordEnvironmentVariable: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SystemLoginSubscription
  extends Promise<AsyncIterator<SystemLoginNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  username: () => Promise<AsyncIterator<String>>;
  passwordEnvironmentVariable: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SystemLoginSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SystemLoginSubscriptionPayload
  extends Promise<SystemLoginSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SystemLogin>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SystemLoginPreviousValues>() => T;
}

export interface SystemLoginSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SystemLoginSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SystemLoginSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SystemLoginPreviousValuesSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSystemLoginNode {
  count: Int;
}

export interface AggregateSystemLogin
  extends Promise<AggregateSystemLoginNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSystemLoginSubscription
  extends Promise<AsyncIterator<AggregateSystemLoginNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocalLoginConnectionNode {}

export interface LocalLoginConnection
  extends Promise<LocalLoginConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LocalLoginEdgeNode>>>() => T;
  aggregate: <T = AggregateLocalLogin>() => T;
}

export interface LocalLoginConnectionSubscription
  extends Promise<AsyncIterator<LocalLoginConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LocalLoginEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLocalLoginSubscription>() => T;
}

export interface SystemLoginConnectionNode {}

export interface SystemLoginConnection
  extends Promise<SystemLoginConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SystemLoginEdgeNode>>>() => T;
  aggregate: <T = AggregateSystemLogin>() => T;
}

export interface SystemLoginConnectionSubscription
  extends Promise<AsyncIterator<SystemLoginConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<SystemLoginEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateSystemLoginSubscription>() => T;
}

export interface SystemLoginPreviousValuesNode {
  id: ID_Output;
  username: String;
  passwordEnvironmentVariable: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SystemLoginPreviousValues
  extends Promise<SystemLoginPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  passwordEnvironmentVariable: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SystemLoginPreviousValuesSubscription
  extends Promise<AsyncIterator<SystemLoginPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  passwordEnvironmentVariable: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocalLoginPreviousValuesNode {
  id: ID_Output;
  username: String;
  hashword: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocalLoginPreviousValues
  extends Promise<LocalLoginPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  hashword: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocalLoginPreviousValuesSubscription
  extends Promise<AsyncIterator<LocalLoginPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  hashword: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocalLoginSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LocalLoginSubscriptionPayload
  extends Promise<LocalLoginSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocalLogin>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocalLoginPreviousValues>() => T;
}

export interface LocalLoginSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocalLoginSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocalLoginSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocalLoginPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  displayName: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  displayName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  systemLogin: <T = SystemLogin>() => T;
  localLogin: <T = LocalLogin>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  displayName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  systemLogin: <T = SystemLoginSubscription>() => T;
  localLogin: <T = LocalLoginSubscription>() => T;
}

export interface SystemLoginEdgeNode {
  cursor: String;
}

export interface SystemLoginEdge
  extends Promise<SystemLoginEdgeNode>,
    Fragmentable {
  node: <T = SystemLogin>() => T;
  cursor: () => Promise<String>;
}

export interface SystemLoginEdgeSubscription
  extends Promise<AsyncIterator<SystemLoginEdgeNode>>,
    Fragmentable {
  node: <T = SystemLoginSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocalLoginNode {
  id: ID_Output;
  username: String;
  hashword: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LocalLogin extends Promise<LocalLoginNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = User>() => T;
  username: () => Promise<String>;
  hashword: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LocalLoginSubscription
  extends Promise<AsyncIterator<LocalLoginNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  username: () => Promise<AsyncIterator<String>>;
  hashword: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocalLoginNode {
  count: Int;
}

export interface AggregateLocalLogin
  extends Promise<AggregateLocalLoginNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocalLoginSubscription
  extends Promise<AsyncIterator<AggregateLocalLoginNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
